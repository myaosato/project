(uiop/package:define-package :roswell.package.shadow/main
                             (:nicknames :roswell.package.shadow)
                             (:use :roswell.package :cl) (:shadow :shadow)
                             (:export) (:intern))
(in-package :roswell.package.shadow/main)
;;don't edit above

(defun shadow (r)
  (if (and (first r)
           (probe-file (first r)))
      (let ((key :shadow)
            (package (normalize-package (load-package (first r)))))
        (cond ((null (rest r))
               (format t "~{~(~A~%~)~}" (cdr (assoc key package))))
              ((find (second r) '("-a" "add") :test 'equal)
               (let ((elts (cdr (assoc key package))))
                 (dolist (i (nthcdr 2 r))
                   (pushnew (read-from-string (format nil ":~A" i)) elts))
                 (setf (cdr (assoc key package)) elts)
                 (save-package package (first r))
                 ))
              ((find (second r) '("-d" "rm") :test 'equal)
               (let ((elts (cdr (assoc key package))))
                 (dolist (i (nthcdr 2 r))
                   (setf elts (remove (read-from-string (format nil ":~A" i)) elts)))
                 (setf (cdr (assoc key package)) elts)
                 (save-package package (first r))))))))
